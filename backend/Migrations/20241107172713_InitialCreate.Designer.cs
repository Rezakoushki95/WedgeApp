// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107172713_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("backend.Models.FiveMinuteBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FiveMinuteBars");
                });

            modelBuilder.Entity("backend.Models.TradingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBarIndex")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CurrentProfitLoss")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EntryPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasOpenOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalProfitLoss")
                        .HasColumnType("TEXT");

                    b.Property<string>("TradingDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TradingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentBarIndex = 0,
                            HasOpenOrder = false,
                            Instrument = "S&P 500",
                            TotalOrders = 0,
                            TotalProfitLoss = 0m,
                            TradingDay = "2024-01-01",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTradingDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            PasswordHash = "75K3eLr+dx6JJFuJ7LwIpEpOFmwGZZkRiB84PURz6U8=",
                            TotalOrders = 0,
                            TotalProfit = 0m,
                            TotalTradingDays = 0,
                            Username = "testuser5"
                        });
                });

            modelBuilder.Entity("backend.Models.TradingSession", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithOne("CurrentTradingSession")
                        .HasForeignKey("backend.Models.TradingSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("CurrentTradingSession");
                });
#pragma warning restore 612, 618
        }
    }
}
