// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241218121348_UpdateTradingSessionModel")]
    partial class UpdateTradingSessionModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("backend.Models.AccessedDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketDataDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarketDataDayId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessedDays");
                });

            modelBuilder.Entity("backend.Models.AccessedMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketDataMonthId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarketDataMonthId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessedMonths");
                });

            modelBuilder.Entity("backend.Models.FiveMinuteBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketDataDayId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarketDataDayId");

                    b.ToTable("FiveMinuteBars");
                });

            modelBuilder.Entity("backend.Models.MarketDataDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketDataMonthId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarketDataMonthId");

                    b.ToTable("MarketDataDays");
                });

            modelBuilder.Entity("backend.Models.MarketDataMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Month")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MarketDataMonths");
                });

            modelBuilder.Entity("backend.Models.TradingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBarIndex")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("EntryPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasOpenOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalProfitLoss")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TradingDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId", "Instrument")
                        .IsUnique();

                    b.ToTable("TradingSessions");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTradingDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.AccessedDay", b =>
                {
                    b.HasOne("backend.Models.MarketDataDay", "MarketDataDay")
                        .WithMany("AccessedDays")
                        .HasForeignKey("MarketDataDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("AccessedDays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketDataDay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.AccessedMonth", b =>
                {
                    b.HasOne("backend.Models.MarketDataMonth", "MarketDataMonth")
                        .WithMany("AccessedMonths")
                        .HasForeignKey("MarketDataMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("AccessedMonths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketDataMonth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.FiveMinuteBar", b =>
                {
                    b.HasOne("backend.Models.MarketDataDay", "MarketDataDay")
                        .WithMany("FiveMinuteBars")
                        .HasForeignKey("MarketDataDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketDataDay");
                });

            modelBuilder.Entity("backend.Models.MarketDataDay", b =>
                {
                    b.HasOne("backend.Models.MarketDataMonth", "MarketDataMonth")
                        .WithMany("Days")
                        .HasForeignKey("MarketDataMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketDataMonth");
                });

            modelBuilder.Entity("backend.Models.TradingSession", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithOne("CurrentTradingSession")
                        .HasForeignKey("backend.Models.TradingSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.MarketDataDay", b =>
                {
                    b.Navigation("AccessedDays");

                    b.Navigation("FiveMinuteBars");
                });

            modelBuilder.Entity("backend.Models.MarketDataMonth", b =>
                {
                    b.Navigation("AccessedMonths");

                    b.Navigation("Days");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("AccessedDays");

                    b.Navigation("AccessedMonths");

                    b.Navigation("CurrentTradingSession");
                });
#pragma warning restore 612, 618
        }
    }
}
